name: Build DBK Kernel Driver

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'DBKKernel/**'
      - '.github/workflows/build-kernel-driver.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'DBKKernel/**'
      - '.github/workflows/build-kernel-driver.yml'

permissions: read-all

jobs:
  build-driver:
    runs-on: windows-2022
    timeout-minutes: 90
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Visual Studio 2019 installation
        id: cache-vs2019
        uses: actions/cache@v4
        with:
          path: |
            C:\Program Files (x86)\Microsoft Visual Studio\2019
            C:\Program Files (x86)\Windows Kits\10
          key: vs2019-v142-wdk-${{ runner.os }}-v4
          restore-keys: |
            vs2019-v142-wdk-${{ runner.os }}-

      - name: Install Visual Studio 2019 Build Tools
        if: steps.cache-vs2019.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Installing Visual Studio 2019 Build Tools with v142 toolset on Windows 2022..."
          
          # Download VS 2019 Build Tools directly
          $vsInstaller = "${env:TEMP}\vs_buildtools.exe"
          Write-Host "Downloading VS 2019 Build Tools installer..."
          Invoke-WebRequest -Uri "https://aka.ms/vs/16/release/vs_buildtools.exe" -OutFile $vsInstaller -UseBasicParsing
          
          Write-Host "Installing VS 2019 with required v142 components..."
          # Install with all required components for kernel driver development
          & $vsInstaller --quiet --wait --norestart `
            --add Microsoft.VisualStudio.Workload.VCTools `
            --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 `
            --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 `
            --add Microsoft.VisualStudio.Component.VC.v142.x86.x64.Spectre `
            --add Microsoft.VisualStudio.Component.VC.ATL `
            --add Microsoft.VisualStudio.Component.VC.ATL.Spectre `
            --add Microsoft.VisualStudio.Component.VC.MFC.x86.x64 `
            --add Microsoft.VisualStudio.Component.VC.MFC.x86.x64.Spectre `
            --add Microsoft.VisualStudio.Component.Windows10SDK.19041 `
            --includeRecommended
          
          $exitCode = $LASTEXITCODE
          Write-Host "VS installer exit code: $exitCode"
          
          if ($exitCode -eq 0 -or $exitCode -eq 3010) {
            Write-Host "✅ Visual Studio 2019 Build Tools installed successfully"
          } else {
            Write-Error "VS 2019 installation failed with exit code $exitCode"
            exit 1
          }

      - name: Install Windows 10 SDK 2004 (10.0.19041.0)
        if: steps.cache-vs2019.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Installing Windows 10 SDK 2004 (10.0.19041.0)..."
          
          # Download SDK installer directly
          Write-Host "Downloading Windows 10 SDK installer..."
          $sdkInstaller = "${env:TEMP}\winsdksetup.exe"
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2311805" -OutFile $sdkInstaller -UseBasicParsing
          
          Write-Host "Installing SDK with required features..."
          & $sdkInstaller /quiet /norestart /features `
            OptionId.WindowsPerformanceToolkit `
            OptionId.WindowsDesktopDebuggers `
            OptionId.NetFxSoftwareDevelopmentKit `
            OptionId.WindowsIPOverUSB `
            OptionId.WindowsDesktopSigning `
            OptionId.UWPManaged `
            OptionId.UWPCPP `
            OptionId.Win32CPP
          
          $exitCode = $LASTEXITCODE
          Write-Host "SDK installer exit code: $exitCode"
          
          if ($exitCode -eq 0 -or $exitCode -eq 3010) {
            Write-Host "✅ Windows 10 SDK installed successfully"
          } else {
            Write-Warning "SDK installation completed with warnings (exit code $exitCode)"
          }

      - name: Install Windows Driver Kit (WDK)
        if: steps.cache-vs2019.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Write-Host "Installing Windows Driver Kit..."
          
          # Download WDK
          $wdkInstaller = "${env:TEMP}\wdksetup.exe"
          Write-Host "Downloading WDK installer..."
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2128854" -OutFile $wdkInstaller -UseBasicParsing
          
          Write-Host "Installing WDK (this may take a few minutes)..."
          # Install WDK quietly
          $process = Start-Process -FilePath $wdkInstaller -ArgumentList "/quiet" -Wait -PassThru
          
          if ($process.ExitCode -eq 0) {
            Write-Host "✅ WDK installation completed successfully"
          } else {
            Write-Warning "WDK installation completed with exit code $($process.ExitCode)"
          }

      - name: Setup MSBuild for VS 2019
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[16.0,17.0)'

      - name: Verify build environment
        shell: pwsh
        run: |
          Write-Host "=== Build Environment Verification ==="
          
          # Check Visual Studio 2019 installation (on Windows 2022 runner)
          $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools"
          if (-not (Test-Path $vsPath)) {
            $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise"
          }
          Write-Host "Visual Studio 2019 Path: $vsPath"
          Write-Host "VS 2019 Exists: $(Test-Path $vsPath)"
          
          # Check for v142 toolset specifically
          $v142Path = "$vsPath\VC\Tools\MSVC"
          if (Test-Path $v142Path) {
            $v142Versions = Get-ChildItem $v142Path -Directory | Select-Object -ExpandProperty Name
            Write-Host "Available v142 toolset versions: $($v142Versions -join ', ')"
          } else {
            Write-Warning "v142 toolset path not found: $v142Path"
          }
          
          # Check Windows SDK 10.0.19041.0
          $sdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10"
          Write-Host "Windows SDK Path: $sdkPath"
          Write-Host "SDK Exists: $(Test-Path $sdkPath)"
          
          if (Test-Path $sdkPath) {
            $sdkVersions = Get-ChildItem "$sdkPath\Include" -Directory | Select-Object -ExpandProperty Name | Where-Object { $_ -like "10.0.*" }
            Write-Host "Available SDK versions: $($sdkVersions -join ', ')"
          }
          
          $sdk19041Path = "$sdkPath\Include\10.0.19041.0"
          Write-Host "SDK 10.0.19041.0 Exists: $(Test-Path $sdk19041Path)"
          
          # Check WDK
          $wdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10\Include\wdf"
          Write-Host "WDK Path: $wdkPath"
          Write-Host "WDK Exists: $(Test-Path $wdkPath)"
          
          # Check MSBuild
          Write-Host "MSBuild version:"
          msbuild -version
          
          # Verify ATL and MFC
          if (Test-Path $v142Path) {
            $latestV142 = (Get-ChildItem $v142Path -Directory | Sort-Object Name -Descending)[0].Name
            $atlPath = "$v142Path\$latestV142\atlmfc"
            Write-Host "ATL/MFC path: $atlPath"
            Write-Host "ATL/MFC Exists: $(Test-Path $atlPath)"
          }

      - name: Build DBK Kernel Driver
        shell: pwsh
        run: |
          Write-Host "Building DBK Kernel Driver (64-bit unsigned with v142 toolset)..."
          
          cd "DBKKernel"
          
          # Build the driver with v142 toolset and specific SDK
          msbuild DBKKernel.vcxproj `
            /p:Configuration="Release without sig" `
            /p:Platform="x64" `
            /p:PlatformToolset=v142 `
            /p:WindowsTargetPlatformVersion=10.0.19041.0 `
            /p:SignMode=Off `
            /p:TestSign=false `
            /p:SignTool= `
            /p:Inf2CatUseLocalTime=true `
            /p:EnableInf2cat=false `
            /m `
            /verbosity:normal
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed with exit code $LASTEXITCODE"
            exit 1
          }

      - name: List build outputs
        shell: pwsh
        run: |
          Write-Host "=== Build Outputs ==="
          cd "DBKKernel"
          
          # List all build outputs
          if (Test-Path "x64") {
            Write-Host "Contents of x64 directory:"
            Get-ChildItem "x64" -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
          }
          
          # Find driver files
          Write-Host "=== Driver Files ==="
          $driverFiles = Get-ChildItem -Recurse -Include "*.sys", "*.inf", "*.pdb" | Where-Object { $_.Name -notlike "*Test*" }
          foreach ($file in $driverFiles) {
            Write-Host "Found: $($file.FullName) ($(($file.Length / 1KB).ToString('F1')) KB)"
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DBKKernel-x64-unsigned-${{ github.sha }}
          path: |
            DBKKernel/**/*.sys
            DBKKernel/**/*.inf
            DBKKernel/**/*.pdb
          if-no-files-found: error

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.sha }}
          path: |
            DBKKernel/**/*.log
            DBKKernel/**/*.err
          if-no-files-found: ignore