name: Build DBK Kernel Driver

on:
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'DBKKernel/**'
      - '.github/workflows/build-kernel-driver.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'DBKKernel/**'
      - '.github/workflows/build-kernel-driver.yml'

permissions: read-all

jobs:
  build-driver:
    runs-on: windows-2022
    timeout-minutes: 90
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Visual Studio 2019 Build Tools (v142)
        shell: pwsh
        run: |
          Write-Host "Installing Visual Studio 2019 Build Tools (v142) on windows-2022..."
          
          # If VS2019 already present, skip
          $vs2019Path = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools"
          if (Test-Path $vs2019Path) { Write-Host "✅ VS2019 BuildTools already present at $vs2019Path"; exit 0 }

          # Try winget first with robust waiting
          $winget = Get-Command winget -ErrorAction SilentlyContinue
          if ($winget) {
            Write-Host "Installing VS2019 via winget..."
            $override = '--quiet --wait --norestart --installPath "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools" --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 --add Microsoft.VisualStudio.Component.VC.v142.x86.x64.Spectre --add Microsoft.VisualStudio.Component.VC.ATL --add Microsoft.VisualStudio.Component.VC.ATL.Spectre --add Microsoft.VisualStudio.Component.VC.MFC.x86.x64 --add Microsoft.VisualStudio.Component.VC.MFC.x86.x64.Spectre --add Microsoft.VisualStudio.Component.Windows10SDK.19041'
            $args = @('install','--id','Microsoft.VisualStudio.2019.BuildTools','--exact','--source','winget','--silent','--accept-package-agreements','--accept-source-agreements','--override', $override)
            $proc = Start-Process -FilePath 'winget' -ArgumentList $args -Wait -PassThru
            Write-Host "winget exit code: $($proc.ExitCode)"
            if ($proc.ExitCode -eq 0 -or $proc.ExitCode -eq 3010) {
              Write-Host "✅ VS2019 installed via winget"
              exit 0
            } else {
              Write-Warning "winget installation returned $($proc.ExitCode). Falling back to bootstrapper."
            }
          }

          # Try Chocolatey as secondary fallback
          $choco = Get-Command choco -ErrorAction SilentlyContinue
          if ($choco) {
            Write-Host "Installing VS2019 via Chocolatey..."
            $params = '--add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.v142.x86.x64 --add Microsoft.VisualStudio.Component.VC.v142.x86.x64.Spectre --add Microsoft.VisualStudio.Component.VC.ATL --add Microsoft.VisualStudio.Component.VC.ATL.Spectre --add Microsoft.VisualStudio.Component.VC.MFC.x86.x64 --add Microsoft.VisualStudio.Component.VC.MFC.x86.x64.Spectre --add Microsoft.VisualStudio.Component.Windows10SDK.19041 --quiet --wait --norestart'
            $procC = Start-Process -FilePath 'choco' -ArgumentList @('install','visualstudio2019buildtools','-y','--no-progress','--package-parameters',$params) -Wait -PassThru
            Write-Host "choco exit code: $($procC.ExitCode)"
            if ($procC.ExitCode -eq 0) {
              Write-Host "✅ VS2019 installed via Chocolatey"
              exit 0
            } else {
              Write-Warning "Chocolatey installation returned $($procC.ExitCode). Falling back to bootstrapper."
            }
          }

          # Fallback to VS 2019 bootstrapper with Start-Process
          $bootstrapper = "${env:TEMP}\vs_buildtools.exe"
          Write-Host "Downloading VS2019 bootstrapper..."
          Invoke-WebRequest -Uri "https://aka.ms/vs/16/release/vs_buildtools.exe" -OutFile $bootstrapper -UseBasicParsing
          Write-Host "Running bootstrapper... (this may take a while)"
          $bsArgs = @(
            '--quiet','--wait','--norestart',
            '--installPath','C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools',
            '--add','Microsoft.VisualStudio.Workload.VCTools',
            '--add','Microsoft.VisualStudio.Component.VC.Tools.x86.x64',
            '--add','Microsoft.VisualStudio.Component.VC.v142.x86.x64',
            '--add','Microsoft.VisualStudio.Component.VC.v142.x86.x64.Spectre',
            '--add','Microsoft.VisualStudio.Component.VC.ATL',
            '--add','Microsoft.VisualStudio.Component.VC.ATL.Spectre',
            '--add','Microsoft.VisualStudio.Component.VC.MFC.x86.x64',
            '--add','Microsoft.VisualStudio.Component.VC.MFC.x86.x64.Spectre',
            '--add','Microsoft.VisualStudio.Component.Windows10SDK.19041',
            '--includeRecommended'
          )
          $proc2 = Start-Process -FilePath $bootstrapper -ArgumentList $bsArgs -Wait -PassThru
          Write-Host "VS2019 bootstrapper exit code: $($proc2.ExitCode)"
          if ($proc2.ExitCode -ne 0 -and $proc2.ExitCode -ne 3010) {
            Write-Error "VS2019 installation failed with exit code $($proc2.ExitCode)"
            exit 1
          }

          # Verify installation
          if (Test-Path $vs2019Path) {
            Write-Host "✅ Confirmed VS2019 BuildTools installed at $vs2019Path"
          } else {
            Write-Error "VS2019 BuildTools not found after installation."
            exit 1
          }

      - name: Install Windows 10 SDK 2004 (10.0.19041.0)
        shell: pwsh
        run: |
          Write-Host "Installing Windows 10 SDK 2004 (10.0.19041.0)..."
          
          $sdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10\Include\10.0.19041.0"
          if (Test-Path $sdkPath) {
            Write-Host "✅ Windows 10 SDK 10.0.19041.0 already installed. Skipping."
            exit 0
          }

          # Download SDK installer directly
          Write-Host "Downloading Windows 10 SDK installer..."
          $sdkInstaller = "${env:TEMP}\winsdksetup.exe"
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2311805" -OutFile $sdkInstaller -UseBasicParsing
          
          Write-Host "Installing SDK with required features..."
          & $sdkInstaller /quiet /norestart /features `
            OptionId.WindowsPerformanceToolkit `
            OptionId.WindowsDesktopDebuggers `
            OptionId.NetFxSoftwareDevelopmentKit `
            OptionId.WindowsIPOverUSB `
            OptionId.WindowsDesktopSigning `
            OptionId.UWPManaged `
            OptionId.UWPCPP `
            OptionId.Win32CPP
          
          $exitCode = $LASTEXITCODE
          Write-Host "SDK installer exit code: $exitCode"
          
          if ($exitCode -eq 0 -or $exitCode -eq 3010) {
            Write-Host "✅ Windows 10 SDK installed successfully"
          } else {
            Write-Warning "SDK installation completed with warnings (exit code $exitCode)"
          }

      - name: Install Windows Driver Kit (WDK)
        shell: pwsh
        run: |
          Write-Host "Installing Windows Driver Kit..."
          
          $wdkInclude = "${env:ProgramFiles(x86)}\Windows Kits\10\Include\wdf"
          if (Test-Path $wdkInclude) {
            Write-Host "✅ WDK already installed. Skipping."
            exit 0
          }

          # Download WDK
          $wdkInstaller = "${env:TEMP}\wdksetup.exe"
          Write-Host "Downloading WDK installer..."
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2128854" -OutFile $wdkInstaller -UseBasicParsing
          
          Write-Host "Installing WDK (this may take a few minutes)..."
          # Install WDK quietly
          $process = Start-Process -FilePath $wdkInstaller -ArgumentList "/quiet" -Wait -PassThru
          
          if ($process.ExitCode -eq 0) {
            Write-Host "✅ WDK installation completed successfully"
          } else {
            Write-Warning "WDK installation completed with exit code $($process.ExitCode)"
          }

      # setup-msbuild not required; we call VS2019 MSBuild.exe directly

      - name: Verify build environment
        shell: pwsh
        run: |
          Write-Host "=== Build Environment Verification ==="
          
          # Check Visual Studio 2019 installation
          $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools"
          if (-not (Test-Path $vsPath)) { $vsPath = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise" }
          Write-Host "Visual Studio 2019 Path: $vsPath"
          Write-Host "VS 2019 Exists: $(Test-Path $vsPath)"

          if (-not (Test-Path $vsPath)) {
            Write-Error "VS 2019 is required but not installed."
            exit 1
          }
          
          # Check for v142 toolset specifically
          $vctoolsPath = Join-Path $vsPath 'VC\Tools\MSVC'
          if (Test-Path $vctoolsPath) {
            $msvcVersions = Get-ChildItem $vctoolsPath -Directory | Select-Object -ExpandProperty Name
            Write-Host "Available MSVC toolset versions: $($msvcVersions -join ', ')"
          } else {
            Write-Warning "MSVC tools path not found at $vctoolsPath"
          }
          
          # Check Windows SDK 10.0.19041.0
          $sdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10"
          Write-Host "Windows SDK Path: $sdkPath"
          Write-Host "SDK Exists: $(Test-Path $sdkPath)"
          
          if (Test-Path $sdkPath) {
            $sdkVersions = Get-ChildItem "$sdkPath\Include" -Directory | Select-Object -ExpandProperty Name | Where-Object { $_ -like "10.0.*" }
            Write-Host "Available SDK versions: $($sdkVersions -join ', ')"
          }
          
          $sdk19041Path = "$sdkPath\Include\10.0.19041.0"
          Write-Host "SDK 10.0.19041.0 Exists: $(Test-Path $sdk19041Path)"
          
          # Check WDK
          $wdkPath = "${env:ProgramFiles(x86)}\Windows Kits\10\Include\wdf"
          Write-Host "WDK Path: $wdkPath"
          Write-Host "WDK Exists: $(Test-Path $wdkPath)"
          
          # Check MSBuild
          $vs2019MSBuild = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
          if (-not (Test-Path $vs2019MSBuild)) { $vs2019MSBuild = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" }
          Write-Host "VS2019 MSBuild path: $vs2019MSBuild"
          if (Test-Path $vs2019MSBuild) { & $vs2019MSBuild -version } else { Write-Error "VS2019 MSBuild not found"; exit 1 }
          
          # Verify ATL and MFC (guarded)
          if ($vctoolsPath -and (Test-Path $vctoolsPath)) {
            $msvcDirs = Get-ChildItem $vctoolsPath -Directory | Sort-Object Name -Descending
            if ($msvcDirs -and $msvcDirs.Count -gt 0) {
              $latestMSVC = $msvcDirs[0].FullName
              $atlPath = Join-Path $latestMSVC 'atlmfc'
              Write-Host "ATL/MFC path: $atlPath"
              Write-Host "ATL/MFC Exists: $(Test-Path $atlPath)"
            } else {
              Write-Host "No MSVC version folders found under $vctoolsPath"
            }
          } else {
            Write-Host "Skipping ATL/MFC check: MSVC tools not found"
          }

      - name: Build DBK Kernel Driver
        shell: pwsh
        run: |
          Write-Host "Building DBK Kernel Driver (64-bit unsigned with v142 toolset)..."
          
          cd "DBKKernel"
          
          # Resolve MSBuild from VS2019 explicitly
          $msbuildExe = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
          if (-not (Test-Path $msbuildExe)) { $msbuildExe = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\MSBuild.exe" }
          if (-not (Test-Path $msbuildExe)) {
            Write-Error "MSBuild.exe from VS2019 not found. Ensure VS2019 Build Tools installed."
            exit 1
          }
          Write-Host "Using MSBuild at: $msbuildExe"

          # Build the driver with v142 toolset and specific SDK
          & $msbuildExe DBKKernel.vcxproj `
            /p:Configuration="Release without sig" `
            /p:Platform="x64" `
            /p:PlatformToolset=WindowsKernelModeDriver10.0 `
            /p:WindowsTargetPlatformVersion=10.0.19041.0 `
            /p:SignMode=Off `
            /p:TestSign=false `
            /p:SignTool= `
            /p:Inf2CatUseLocalTime=true `
            /p:EnableInf2cat=false `
            /m `
            /verbosity:normal
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Build failed with exit code $LASTEXITCODE"
            exit 1
          }

      - name: List build outputs
        shell: pwsh
        run: |
          Write-Host "=== Build Outputs ==="
          cd "DBKKernel"
          
          # List all build outputs
          if (Test-Path "x64") {
            Write-Host "Contents of x64 directory:"
            Get-ChildItem "x64" -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
          }
          
          # Find driver files
          Write-Host "=== Driver Files ==="
          $driverFiles = Get-ChildItem -Recurse -Include "*.sys", "*.inf", "*.pdb" | Where-Object { $_.Name -notlike "*Test*" }
          foreach ($file in $driverFiles) {
            Write-Host "Found: $($file.FullName) ($(($file.Length / 1KB).ToString('F1')) KB)"
          }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: DBKKernel-x64-unsigned-${{ github.sha }}
          path: |
            DBKKernel/**/*.sys
            DBKKernel/**/*.inf
            DBKKernel/**/*.pdb
          if-no-files-found: error

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.sha }}
          path: |
            DBKKernel/**/*.log
            DBKKernel/**/*.err
          if-no-files-found: ignore